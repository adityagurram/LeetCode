/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

//Time Complexity is O(n) and Space Complexity O(n)

//Here I am doing the DFS to traverse each node in the tree and checking if that node is greater than current max value then adding the count to result.

public class Solution {
     int result=0;
    public int GoodNodes(TreeNode root) {
        
        if(root ==null)
        {
            return 0;
        }      
         
        helper(root, root.val);
        
        return result;
    }
    
    private  void helper (TreeNode root, int max)
    {
        
        if(root.val>= max)
        {
            result++;
        }
        
        if(root.left!=null)
        {
            max= Math.Max(root.val, max);
            helper(root.left, max);          
        }
        
        if(root.right !=null)
        {
            max= Math.Max(root.val, max);          
            helper(root.right, max);         
        }      
        
    }
    
  
}
    




Brute Force

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
     int result=0;
    public int GoodNodes(TreeNode root) {
        
        if(root ==null)
        {
            return 0;
        }
        int max= Int32.MinValue;
        List<int> slate= new List<int>();
        slate.Add(root.val);
        helper(root, slate);
        
        return result;
    }
    
    private  void helper (TreeNode root, List<int>slate)
    {
        
        if(root.val>= FindMax(slate))
        {
            result++;
        }
        
        if(root.left!=null)
        {
            slate.Add(root.left.val);           
            helper(root.left, slate);
            slate.RemoveAt(slate.Count () -1);
        }
        
        if(root.right !=null)
        {
            slate.Add(root.right.val);           
            helper(root.right, slate);
            slate.RemoveAt(slate.Count () -1);
        }       
        
    }
    
    private int FindMax(List<int> slate)
    {
        int max= Int32.MinValue;
        
        foreach (int x in slate)
        {
            if(x>max)
            {
                max=x;
            }
        }
        return max;
    }
}
    