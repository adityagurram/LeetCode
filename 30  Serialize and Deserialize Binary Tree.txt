/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Codec {

    List<string> res= new List<string> ();
    int index=0;
    // Encodes a tree to a single string.
    public string serialize(TreeNode root) {
      
        dfs_Helper(root);
        return string.Join (",", res);
    }
    
    private void dfs_Helper(TreeNode root)
    {
        if(root ==null)
        {         
            res.Add ("N");   
            return;
        }
        res.Add (Convert.ToString (root.val));
        
        dfs_Helper(root.left);
        dfs_Helper(root.right);
        
    }
 // Decodes your encoded data to tree.
        public TreeNode deserialize(string data)
        {

            string[] treeData = data.Split(',');
            return dfs_Helper(treeData);
        }

        private TreeNode dfs_Helper(string[] treeData)// we need a global index as we need that index to be ++ after each DFS call.
        {
            if (index == treeData.Length)
            {
                return null;
            }
            if (treeData[index] == "N")
            {
                index++;
                return null;
            }
            int num = Convert.ToInt32(treeData[index]);
            TreeNode node = new TreeNode(num);
            index++;
            node.left = dfs_Helper(treeData);
            node.right = dfs_Helper(treeData);
            return node;

        }

}

// Your Codec object will be instantiated and called as such:
// Codec ser = new Codec();
// Codec deser = new Codec();
// TreeNode ans = deser.deserialize(ser.serialize(root));