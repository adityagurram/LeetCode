public class Solution {
    public IList<string> FindWords(char[][] board, string[] words) {
        
        List<string> result= new List<string> ();
        
        if(words.Length==0 || board.Length==0)
        {
            return result;
        }
        
        
        foreach(string word in words)
        {
            if(IsPresent(board, word))
            {
                result. Add (word);
            }
        }
        
        return result;
    
    }
    
    private bool IsPresent(char[][] board, string word)
    {
        for(int i=0; i< board.Length; i++)
        {
            for(int j=0; j< board[i].Length; j++) 
            {
                if(word[0]== board[i][j])
                {
                    if(DFS(board, i, j, 0, word))
                    {
                        return true;
                    }
                }
            }
        }
        
        return false;
    }
    private bool DFS(char[][] board, int i, int j,int count, string word)
    {
        if(word.Length== count )
            return true;
        
        //check for boundary conditions
        if(i<0 || j<0 || i>= board.Length || j>= board [i].Length || board[i][j]!= word[count] )
        {
            return false;
        }
        
        char temp = board [i][j];
        
        board [i][j]= '$';
        
            bool isFound=(DFS(board, i-1, j, count +1, word))||
            (DFS(board, i+1, j, count +1, word)) ||
            (DFS(board, i, j+1, count +1, word)) ||
            (DFS(board, i, j-1, count +1, word));
        
        
        board [i][j]= temp;
        
        return isFound;
    }
}