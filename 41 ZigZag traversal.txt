/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    public IList<IList<int>> ZigzagLevelOrder(TreeNode root) {
        
        IList<IList<int>> result= new List<IList<int>>();        
        if(root==null)
        return result;
        
        
        Queue<TreeNode> queue= new Queue<TreeNode>();        
        queue.Enqueue(root);
        bool flag=true;
        while (queue.Count () >0)
        {
            flag=!flag;
            int queueCount= queue.Count();
            List<int> tempList= new List<int>();
            for(int i=0; i< queueCount; i++)
            {
                TreeNode temp= queue.Dequeue();
                tempList.Add (temp.val);
                
                if(temp.left!=null)
                {
                    queue.Enqueue(temp.left);
                }
                
                if(temp.right!=null)
                {
                    queue.Enqueue(temp.right);
                }
            }
            if(flag)
            tempList.Reverse();
            
            result.Add (tempList);
        }
        
        return result;
    }
}