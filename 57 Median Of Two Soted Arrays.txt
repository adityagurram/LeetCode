public class Solution {
    public double FindMedianSortedArrays(int[] nums1, int[] nums2) {
        //Here, Since it is a hard problem, the brute force method of merging two arrays and finding median will not be considered as optimal solution 
        
        //We need to do a Binary Search to split the arrays such that l1 < r2 and l2 < r1
     if(nums1.Length > nums2.Length)
     return FindMedianSortedArrays(nums2,nums1);//;lets work with smallest array so that code works fine
        
        
      int n1= nums1.Length;
      int n2= nums2.Length;
        
        
        
        
      int low=0;
      int high=n1;
        
        while (low <= high)
        {
            int cut1= low+ (high-low)/2;
            int cut2= (n1+ n2)/2 - cut1;
            
            int l1=(cut1==0) ? Int32.MinValue : nums1[cut1-1] ;            
            int l2=(cut2==0) ? Int32.MinValue : nums2[cut2-1];
            int r1=(cut1==n1) ? Int32.MaxValue : nums1[cut1];
            int r2=(cut2==n2) ? Int32.MaxValue : nums2[cut2];
            
            
            //Now we need to check for the condition
            
            if(l1 > r2)
            {
                //means we need to move cut leftside
                
                //so we reduce the high value towards left half
                
                high = cut1-1;
            }
            
            else if (l2> r1)
            {
                // we need to shift right so increase the low ptr
                
                low= cut1+1;
            }
            
            else
            {
                if((n1+ n2)%2==0)
                {
                    return (double)( Math.Max(l1, l2) + Math.Min(r1, r2))/2;
                }
                else
                {
                    return Math.Min(r1,r2);
                }
            }
            
         
        }   return 0;
    }
}