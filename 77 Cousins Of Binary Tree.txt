/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    public bool IsCousins(TreeNode root, int x, int y) {
        
        
        //Here we need to find the x and y and return their heights one after another
    if(root.val== x || root.val==y) return false;
        
    int parent = -1;
    
    int firstCousinHeight = calculateHeight(root, x,ref parent, 0);
        
    int secondParent=-1;
    
    int secondCousinHeight =calculateHeight(root, y,ref secondParent, 0);
    
    if(parent != secondParent && (firstCousinHeight==secondCousinHeight)) return true;
     return false;   
    }
    
    private int calculateHeight(TreeNode root, int cousinNode, ref int parent, int height)
    {
        
        if(root==null) return 0;
        
        if(root.val== cousinNode)
        {
            return height;
        }
        parent= root.val;
        int left= calculateHeight (root.left, cousinNode, ref parent, height +1);
        
        if(left!=0)//we found the cousinNode on the left side, we dont have to iterate the right side of the tree
        {
            return left;
        }
          parent= root.val;
        int right = calculateHeight (root.right, cousinNode, ref parent, height +1);
        
        if(right!=0) return right;
            
            
        return 0;
    }
}