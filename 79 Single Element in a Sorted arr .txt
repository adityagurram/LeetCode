public class Solution {
    public int SingleNonDuplicate(int[] nums) {
        //SInce they are asking us to implement this in logn time then we must use Binary Search
        
        int high= nums.Length -1;
        int low=0;
        int mid = (low) + (high - low)/2;
        
        
        //boundary checks
        
        if(high ==0) return nums [0];
        else if (nums [0] != nums [1]) return nums [0];
        else if (nums [high] != nums [high -1]) return nums [high];
        
        
        while (low<= high)
        {
            mid = (low) + (high - low)/2;
            
            // postive case
            
            if(nums [mid]!= nums [mid -1] && nums [mid]!=nums [mid +1]) return nums [mid];
            
            if(( mid %2==0 && nums[mid] == nums [mid +1]) ||  mid %2==1 && nums [mid]== nums [mid-1])
            {
                low = mid +1;
            }
            else
            {
              high= mid-1;  
            }
        }
        
        return 0;
    }
}