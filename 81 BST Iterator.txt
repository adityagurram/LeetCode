/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class BSTIterator {

    Stack<TreeNode> stack;
    
    public BSTIterator(TreeNode root) {
        stack= new Stack<TreeNode> ();
        Inorder(root);
    }
    
    public void Inorder(TreeNode root)//this is partial inorder
    {
        while(root!=null)
        {
            stack.Push (root);
            root= root.left;
        }
        
    }
    
    public int Next() {
        
        TreeNode top=stack.Pop();        
        Inorder(top.right);
        return top.val;
    }
    
    public bool HasNext() {
        
        if(stack.Count () ==0) return false;
        
        return true;
    }
}

/**
 * Your BSTIterator object will be instantiated and called as such:
 * BSTIterator obj = new BSTIterator(root);
 * int param_1 = obj.Next();
 * bool param_2 = obj.HasNext();
 */