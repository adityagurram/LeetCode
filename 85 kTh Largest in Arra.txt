public class Solution {
    public int FindKthLargest(int[] nums, int k) {
        if(nums.Length==0) return 0;
        
        //since the kth largest number will be present in the n-k position, we need to look for the pivot index in that n-k position
        
        helper(ref nums, 0, nums.Length -1, nums.Length -k);
        
        return nums [nums.Length -k];
    }
    
    
    private void helper (ref int [] nums, int start, int end, int kIndex)
    {
        if(start >=end )
        {
            return ;

            }
        
        //now we need to do teh lomutos partitioning 
        //we will start with finding the pivot index using random funciton and then put it at start position
        
        Random rand = new Random();
        int randIndex=rand.Next(start,end);
        int pivot= nums [randIndex];
        
        int smaller= start;
        int bigger= start;
        
        //swap pivot to start postion
        swap(ref nums, randIndex, smaller);
        
        
        for(int k= bigger+1; k<= end; k++)
        {
            if(nums[k]<= pivot)
            {
                smaller++;
                swap(ref nums, smaller,k);
            }
        }
        
        swap(ref nums, start, smaller);
        
        
        //call the subordinates
        
        if(kIndex==smaller)
        {
            return;
        }
        
        else if(kIndex< smaller)
        {
            helper(ref nums, start, smaller-1, kIndex);
        }
        else
        {
            helper(ref nums, smaller +1, end, kIndex);
        }
    }
    
    private void swap(ref int [] nums, int i, int j)
    {
        int temp = nums [i];
        nums [i]= nums [j];
        nums [j]= temp;
    }
}