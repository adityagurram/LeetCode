/*
// Definition for a Node.
public class Node {
    public int val;
    public Node left;
    public Node right;
    public Node next;

    public Node() {}

    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, Node _left, Node _right, Node _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
}
*/

public class Solution {
    public Node Connect(Node root) {
        
        if(root==null) return root;
        
        Queue<Node> queue= new Queue<Node>();
        
        queue.Enqueue(root);
        
        while (queue.Count () > 0)
        {
            int queueCount= queue.Count();
            
            for(int i=0; i< queueCount; i++)
            {
                Node temp= queue.Dequeue();
                
                if(queue.Count()==0 || queueCount -1==i)
                {
                    temp.next=null;
                }
                else
                {
                    temp.next= queue.Peek();
                }
                
                if(temp.left !=null)
                {
                    queue.Enqueue(temp.left);
                }
                
                if(temp.right!=null)
                {
                    queue.Enqueue(temp.right);
                }
                
            }
        }
        
        return root;
    }
}